# Generated by Django 4.2.7 on 2025-08-11 18:12

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('fecha_nacimiento', models.DateField(blank=True, help_text='Fecha de nacimiento del usuario', null=True, verbose_name='Fecha de nacimiento')),
                ('edad', models.PositiveIntegerField(blank=True, help_text='Edad del usuario', null=True, validators=[django.core.validators.MinValueValidator(13), django.core.validators.MaxValueValidator(120)], verbose_name='Edad')),
                ('tipo_usuario', models.CharField(choices=[('estudiante', 'Estudiante'), ('docente', 'Docente'), ('admin', 'Administrador')], default='estudiante', help_text='Tipo de usuario en la plataforma', max_length=20, verbose_name='Tipo de usuario')),
                ('usuario_unico', models.CharField(blank=True, help_text='Identificador único del usuario', max_length=100, null=True, unique=True, verbose_name='Usuario único')),
                ('avatar_url', models.URLField(blank=True, help_text='URL del avatar del usuario', max_length=500, null=True, verbose_name='Avatar URL')),
                ('pais', models.CharField(blank=True, help_text='País de residencia del usuario', max_length=100, null=True, verbose_name='País')),
                ('facebook_url', models.URLField(blank=True, help_text='URL del perfil de Facebook', max_length=300, null=True, verbose_name='Facebook URL')),
                ('linkedin_url', models.URLField(blank=True, help_text='URL del perfil de LinkedIn', max_length=300, null=True, verbose_name='LinkedIn URL')),
                ('biografia', models.TextField(blank=True, help_text='Descripción personal del usuario', null=True, verbose_name='Biografía')),
                ('activo', models.BooleanField(default=True, help_text='Indica si el usuario está activo', verbose_name='Activo')),
                ('fecha_registro', models.DateTimeField(auto_now_add=True, help_text='Fecha y hora de registro del usuario', verbose_name='Fecha de registro')),
                ('fecha_actualizacion', models.DateTimeField(auto_now=True, help_text='Fecha y hora de la última actualización', verbose_name='Fecha de actualización')),
                ('telefono', models.CharField(blank=True, help_text='Número de teléfono del usuario', max_length=20, null=True, validators=[django.core.validators.RegexValidator(message='Ingrese un número de teléfono válido', regex='^\\+?1?\\d{9,15}$')], verbose_name='Teléfono')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identificador único universal', unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuario',
                'verbose_name_plural': 'Usuarios',
                'db_table': 'usuarios',
                'ordering': ['-fecha_registro'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
